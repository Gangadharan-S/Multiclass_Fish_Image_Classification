# -*- coding: utf-8 -*-
"""multifishstreamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ljxzGuR3UpqTzvyQfQLzgaD5idX4Eknd
"""

!pip install -q streamlit pyngrok tensorflow pillow pandas

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import numpy as np
# import tensorflow as tf
# from tensorflow.keras.models import load_model
# from PIL import Image
# import pandas as pd
# 
# @st.cache_resource
# def load_best_model():
#     model_path = "/content/drive/MyDrive/Project/best_fish_model.h5"
#     return load_model(model_path)
# 
# best_model = load_best_model()
# 
# class_names = [
#     "Fish", "Fish Bass", "Black Sea Spart", "Gilt Heard Bream", "Horse Mackerel",
#     "Red Mullet", "Red Sea Bream", "Sea Bass", "Shrimp", "Striped Red Mullet", "Trout"
# ]
# 
# def preprocess_image(image):
#     image = image.convert("RGB")
#     image = image.resize((224, 224))
#     image = np.array(image) / 255.0
#     image = np.expand_dims(image, axis=0)
#     return image
# 
# st.title("üê† Fish Classification App")
# st.write("Upload images of fish, and the model will predict their types!")
# 
# st.sidebar.header("‚öô Settings")
# confidence_threshold = st.sidebar.slider("Confidence Threshold (%)", 0, 100, 50, 5)
# 
# uploaded_files = st.file_uploader("üì∑ Choose images...", type=["jpg", "jpeg", "png"], accept_multiple_files=True)
# 
# if uploaded_files:
#     for uploaded_file in uploaded_files:
#         st.divider()
#         st.subheader(f"üì∑ Image: {uploaded_file.name}")
#         image = Image.open(uploaded_file)
#         st.image(image, caption="üì∏ Uploaded Image", use_container_width=True)
#         processed_image = preprocess_image(image)
# 
#         with st.spinner("üîç Classifying..."):
#             prediction = best_model.predict(processed_image)
#             predicted_class = class_names[np.argmax(prediction)]
#             confidence = np.max(prediction) * 100
# 
#         if confidence >= confidence_threshold:
#             st.success(f"üéØ *Prediction: {predicted_class}*")
#             st.write(f"üîµ *Confidence:* {confidence:.2f}%")
#         else:
#             st.warning("‚ö† Prediction confidence is too low. Try uploading a clearer image.")
# 
#         st.subheader("üìä Class Probabilities")
#         prob_dict = {class_names[i]: f"{pred*100:.2f}%" for i, pred in enumerate(prediction[0])}
#         st.json(prob_dict)
# 
#         prob_df = pd.DataFrame({"Class": class_names, "Confidence (%)": prediction[0] * 100})
#         prob_df = prob_df.sort_values(by="Confidence (%)", ascending=False)
#         st.bar_chart(prob_df.set_index("Class"))
#

from pyngrok import conf, ngrok

conf.get_default().auth_token = "2zSwv7MhadWyFUgXnQINzLgNLQk_6ALkEGghZTMkRNFwyDKNW"

# Step 2: Kill previous tunnels
ngrok.kill()

public_url = ngrok.connect("http://localhost:8501", proto="http")
print(f"üåç Your Streamlit app is live at: {public_url}")


# Step 4: Start the Streamlit app
!streamlit run app.py --server.port 8501 --server.enableCORS false